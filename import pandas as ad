import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Konfigurasi visualisasi
sns.set_style('whitegrid')
%matplotlib inline

# File CSV dengan percobaan beberapa encoding
file_path = "Data Sales.csv"
encodings = ['windows-1252', 'utf-8', 'ISO-8859-1']

for enc in encodings:
    try:
        df = pd.read_csv(file_path, encoding=enc, delimiter=';')
        break
    except UnicodeDecodeError:
        continue
    except FileNotFoundError:
        print(f"File '{file_path}' tidak ditemukan.")
        df = None
        break

# Jika data berhasil dibaca
if df is not None:
    df.columns = df.columns.str.strip()  # Bersihkan nama kolom dari spasi

    print("=== 5 Baris Pertama dari Dataset ===")
    print(df.head(), "\n")

    # Validasi kolom penting
    required_columns = {'Year', 'Category', 'Product Name', 'City', 'Segment'}
    missing_columns = required_columns - set(df.columns)

    if missing_columns:
        print(f"Kolom berikut tidak ditemukan dalam dataset: {missing_columns}\n")
    else:
        # Konversi kolom Year ke numerik
        df['Year'] = pd.to_numeric(df['Year'], errors='coerce')

        df_2014 = df[df['Year'] == 2014]
        if not df_2014.empty:
            print("="*50)
            print("1. Distribusi Frekuensi Kategori Produk pada Tahun 2014")
            category_counts = df_2014['Category'].value_counts()
            for i, (category, count) in enumerate(category_counts.items(), 1):
                print(f"{i}. {category}: {count}")

            plt.figure(figsize=(8, 6))
            sns.countplot(data=df_2014, x='Category', order=category_counts.index, palette="pastel")
            plt.title('Distribusi Produk per Kategori di Tahun 2014')
            plt.xlabel('Kategori')
            plt.ylabel('Jumlah Produk')
            plt.xticks(rotation=45)
            plt.tight_layout()
            plt.show()
        else:
            print("1. Tidak ada data untuk tahun 2014.\n")

        df_furniture = df[df['Category'] == 'Furniture']
        if not df_furniture.empty:
            print("="*50)
            top_furniture = df_furniture['Product Name'].value_counts().nlargest(20)
            print("2. Top 20 Produk Furniture dengan Frekuensi Tertinggi")
            for i, (product, count) in enumerate(top_furniture.items(), 1):
                print(f"{i}. {product}: {count}")

            plt.figure(figsize=(10, 12))
            sns.barplot(y=top_furniture.index, x=top_furniture.values, palette='Blues_d')
            plt.title('Top 20 Produk Furniture dengan Frekuensi Tertinggi')
            plt.xlabel('Frekuensi')
            plt.ylabel('Nama Produk')
            plt.tight_layout()
            plt.show()
        else:
            print("2. Tidak ada data untuk kategori Furniture.\n")

        df_technology = df[df['Category'] == 'Technology']
        if not df_technology.empty:
            print("="*50)
            top_tech_product = df_technology['Product Name'].value_counts().idxmax()
            print(f"3. Produk dengan frekuensi tertinggi di kategori Technology: {top_tech_product}\n")
        else:
            print("3. Tidak ada data untuk kategori Technology.\n")

        df_jakarta = df[df['City'] == 'DKI Jakarta']
        if not df_jakarta.empty:
            print("="*50)
            transactions_per_year = df_jakarta.groupby('Year').size()
            print("4. Jumlah Transaksi per Tahun di DKI Jakarta (2014-2017)")
            for year, count in transactions_per_year.items():
                print(f"   {year}: {count} transaksi")

            plt.figure(figsize=(10, 6))
            sns.lineplot(x=transactions_per_year.index, y=transactions_per_year.values,
                         marker='o', color='b')
            plt.title('Tren Transaksi per Tahun di DKI Jakarta (2014-2017)')
            plt.xlabel('Tahun')
            plt.ylabel('Jumlah Transaksi')
            plt.grid(True)
            plt.tight_layout()
            plt.show()
        else:
            print("4. Tidak ada data untuk kota DKI Jakarta.\n")

        df_2015_corporate = df[(df['Year'] == 2015) & (df['Segment'] == 'Corporate')]
        if not df_2015_corporate.empty:
            print("="*50)
            total_corporate = len(df_2015_corporate)
            office_supplies_count = (df_2015_corporate['Category'] == 'Office Supplies').sum()
            probability = office_supplies_count / total_corporate

            print(f"5. Peluang pembeli Corporate membeli Office Supplies pada 2015: {probability:.2%}\n")
        else:
            print("5. Tidak ada transaksi Corporate pada tahun 2015.\n")
